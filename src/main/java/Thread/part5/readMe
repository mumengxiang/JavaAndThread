1.join 方法的使用
    void join()
    等待这个线程死亡。
    void join(long millis)
    等待这个线程死亡最多 millis毫秒。
    void join(long millis, int nanos)
    等待最多 millis毫秒加上 nanos纳秒这个线程死亡。


    join()是Thread类的一个方法。根据jdk文档的定义：
    public final void join()throws InterruptedException: Waits for this thread to die.
    join()方法的作用，是等待这个线程结束；但显然，这样的定义并不清晰。个人认为"Java 7 Concurrency Cookbook"的定义较为清晰：
    join() method suspends the execution of the calling thread until the object called finishes its execution.
    也就是说，t.join( .)方法阻塞调用此方法的线程(calling thread)，直到线程t完成，此线程再继续；通常用于在main()主线程内，等待其它线程完成再结束main()主线程。


2.interrupt 方法的使用
    void           interrupt()
    中断这个线程。
    static boolean interrupted()
    测试当前线程是否中断。
    boolean isInterrupted()
    测试这个线程是否被中断。



    通常我们会有这样的需求，即停止一个线程。在java的api中有stop、suspend等方法可以达到目的，但由于这些方法在使用上存在不安全性，会带来不好的副作用，不建议被使用。具体原因可以参考Why is Thread.stop deprecated。
    在本文中，将讨论中断在java中的使用。
    中断在java中主要有3个方法，interrupt(),isInterrupted()和interrupted()。
    interrupt()，在一个线程中调用另一个线程的interrupt()方法，即会向那个线程发出信号——线程中断状态已被设置。至于那个线程何去何从，由具体的代码实现决定。
    isInterrupted()，用来判断当前线程的中断状态(true or false)。
    interrupted()是个Thread的static方法，用来恢复中断状态，名字起得额🙄。

注意：interrupt()不能中断在运行中的线程，它只能改变中断状态而已。

